<div>
    <h4>Spring MVC</h4>
    <ul>
        <li>
            <b class="sub">Overview:</b>
            <a title="e1_1">what is</a>
            <a title="e1_2" class="label-warning">configuration</a>
            <a title="e1_3">components</a>
            <a title="e1_5" class="label-danger">MessageSource</a>
            <a title="e1_6" class="label-warning">web.xml</a>
        </li>
        <li>
            <b class="sub">Controller:</b>
            <a title="e2_1">@Controller</a>
            <a title="e2_2">request mapping</a>
            <a title="e2_3" class="label-warning">parameters</a>
            <a title="e2_4">return types</a>
            <a title="e2_5">testing</a>
            <a title="e2_6" class="label-danger">no annotations</a>
        </li>
        <li>
            <b class="sub">View:</b>
            <a title="e3_1">overview</a>
            <a title="e3_2">resolvers</a>
        </li>
        <li>
            <b class="sub">Model:</b>
            <a title="e4_1">overview</a>
        </li>
    </ul>

    <div class="hidden">
        <div id="e1_1">
            <b>Spring Web MVC</b> is the original web framework built on the Servlet API and has been included in the
            Spring Framework from the very beginning. The formal name, “Spring Web MVC,” comes from the name of
            its source module (spring-webmvc), but it is more commonly known as “Spring MVC”.
            <br/><br/>
            MVC is an abbreviation for a
            <b>Model–View–Controller</b>
            pattern that decouples major components
            allowing for efficient code reuse and parallel development.
        </div>
        <div id="e1_2">
            <ul>
                <li>Add <b>spring-webmvc.jar</b> to classpath (it's not part of spring-core)
                </li>
                <li>Add <b>@EnableWebMvc</b> to @Configuration (in Spring Boot not needed)
                </li>
                <li>
                    <b>Register DispatcherServlet</b>
                    in one of two ways:
                    <ul>
                        <li>implement WebApplicationInitializer</li>
                        <li>extend AbstractAnnotationConfigDispatcherServletInitializer</li>
                    </ul>
                </li>
                <li>Register <b>ContextLoaderListener</b> in web.xml. Inside &lt;listener> -> <b>&lt;listener-class></b><br/>
                    ContextLoaderListener is responsible for starting up and shutting down Spring's root WebApplicationContext
                </li>
            </ul>
        </div>
        <div id="e1_3">
            <b>DispatcherServlet</b>
            - front controller that provides a shared algorithm for
            request processing, while actual work is performed by configurable delegate controllers.
            DispatcherServlet initializes WebApplicationContext (child of root ApplicationContext).
            <br/>
            <br/>

            <b>WebApplicationContext</b>
            is an interface to provide configuration for a web application. Typically
            contains infrastructure beans, such as data repositories and business services that need to be shared across
            multiple Servlet instances. Supports additional scopes: <b>request</b>, <b>session</b>, <b>application</b>
            <br/><br/>
            <b>AnnotationConfigWebApplicationContext</b> is an implementation of <b>WebApplicationContext</b> that is
            essentially the equivalent of AnnotationConfigApplicationContext for a web environment. Can be configured in
            Java config as well as in XML.
            <br/><br/>
            <b>contextConfigLocation</b> param can be set to DispatcherServlet in web.xml to set @Configuration class or xml config.
        </div>
        <div id="e1_5">
            <b>MessageSource</b> (interface) - a solution to make a management of static text more easier and efficient.<br/>
            <b>ResourceBundleMessageSource</b> (implementation of MessageSource) can get messages from the defined property file.<br/><br/>
            Further usage of ubtained messages in the JSP:<br/>
            <b>&lt;spring:message code="page.header"/></b><br/>
            where "page.header" is a property name whit will be substituted by it's value.<br/><br/>

            MessageSource interface is <b>automatically resolved</b>, with no additional setup necessary, other than putting
            the 'Autowired' annotation.
        </div>
        <div id="e1_6">
            In web.xml you can declare:
            <ul>
                <li><b>AnnotationConfigWebApplicationContext</b> (declare the root application context)</li>
                <li><b>ContextLoaderListener</b> (bootstraps the root application context)</li>
                <li>Spring configuration class/xml (via "init-param" -> "param-value" -> MyConfig)</li>
                <li>DispatcherServlet</li>
                <li>DelegatingFilterProxy/FilterChainProxy</li>
                <li>servlet-mapping to map all requests to the dispatcher servlet</li>
            </ul><br/>
            You cannot define resolvers since they are must be refistered as a beans.
        </div>
    </div>

    <div class="hidden">
        <div id="e2_1">
            <b>@Controller</b>
            - simply @Component specialization that tells the developer that the component is a
            "Controller" role.

        </div>
        <div id="e2_2">
            <b>@RequestMapping</b>
            maps incoming request to a controller or a method. Supported through a
            RequestMappingHandlerMapping and RequestMappingHandlerAdapter.
            <br/>
            <br/>
            Specializations (can be applied only to method):
            <ul>
                <li>
                    <b>GetMapping</b>
                </li>
                <li>
                    <b>PostMapping</b>
                </li>
                <li>DeleteMapping</li>
                <li>PutMapping</li>
                <li>(and more)</li>
            </ul>
            <br/>
        </div>
        <div id="e2_3">
            Mappling parameters:
            <ul>
                <li>
                    <b class="r">@PathVariable</b>
                    maps method parameters from the URI path(e.g. http://foo.com/user<b>/33</b>)
                </li>
                <li>
                    <b class="r">@RequestParam</b>
                    maps method parameters from the URI query (e.g.
                    http://foo.com/user<b>?id=33</b>).
                    <br/>
                    <ul>
                        <li>For Map/MultiValueMap - populated with all request parameters</li>
                        <li>MultipartFile - representation of an uploaded file</li>
                    </ul>
                </li>
                <li>@MatrixVariable</li>
                <li>@RequestPart</li>
                <li><b class="r">@RequestHeader</b></li>
                <li>@CookieValue</li>
                <li><b class="r">@ModelAttribute</b></li>
                <li>@SessionAttribute</li>
            </ul>
            <br/>
            All of the above except ModelAttribute are <b class="r">Required</b> by default.
            <br/><br/>

            Controller method can receive following arguments (without any annotation):
            <ul>
                <li><b class="r">ServletRequest</b></li>
                <li><b class="r">ServletResponse</b></li>
                <li><b class="r">HttpSession</b></li>
                <li>Principal</li>
                <li>HttpMethod</li>
                <li>Map</li>
                <li>Model</li>
                <li>ModelMap</li>
                <li>Any other type with converter</li>
            </ul>
        </div>
        <div id="e2_4">
            <ul>
                <li>void</li>
                <li>String - returns logical view name</li>
                <li>View</li>
                <li>HttpHeaders</li>
                <li>Map</li>
                <li>Model</li>
                <li>ModelAndView</li>
                <li>(and more)</li>
            </ul>
        </div>
        <div id="e2_5">
            <ul>
                <li>
                    <b>Mock</b>
                    implementations of Servlet API contracts for unit testing
                    <b>controllers</b>,
                    filters, and other web components
                </li>
                <li>A framework, also known as
                    <b>MockMvc</b>, for testing annotated controllers through the DispatcherServlet
                </li>
            </ul>
        </div>
        <div id="e2_6">
            To create a controller without annotations:
            <ul>
                <li>Create an implementation of <b>Controller</b> interface or extension of
                    any Controller's implementations like AbstractController.</li>
                <li>A <b class="r">HandlerMapping</b> implementation that does not use annotations can be used, to map the requests
                    to the handler objects.</li>
                <li>BeanNameUrlHandlerMapping is included in the Spring framework, and it is the default if no
                    HandlerMapping bean is registered in the application context.</li>
            </ul>
        </div>
    </div>

    <div class="hidden">
        <div id="e3_1">
            View is the base interface for different view technologies (XML, PDF, XLS etc.).
            <br/>
            All handler methods in the Spring MVC controllers must resolve to a
            <b class="r">logical view name</b>, either explicitly
            (e.g., by returning a String, View, or ModelAndView) or implicitly (i.e., based on conventions)
            <br/>
            Views in Spring are addressed by a logical view name and are resolved by a
            <b>view resolver</b>.
        </div>
        <div id="e3_2">
            The right view is chosen by the
            <b>ViewResolver</b>
            bean that has to be registered in the container.
            <ul>
                <li>The DispatcherServlet delegates to a ViewResolver to obtain View implementation based on view
                    name.
                </li>
                <li>The default ViewResolver treats the view name as a Web Application-relative file path – i.e. a JSP:
                    /WEB-INF/reward/list.jsp
                </li>
                <li>Override this default by registering a ViewResolver bean with the DispatcherServlet</li>
            </ul>
            <br/>

            Some of View Resolvers in Spring MVC:
            <ul>
                <li>Thymeleaf: ThymeleafViewResolver</li>
                <li>JSP and JSTL: <b class="r">InternalResourceViewResolver</b> or <b class="r">ResourceBundleViewResolver</b></li>
                <li>Apache Tiles: <b class="r">UrlBasedViewResolver</b> or ResourceBundleViewResolver</li>
                <li>Xslt: XsltViewResolver</li>
            </ul><br/>

            Other resolvers:
            <ul>
                <li><b>HandlerExceptionResolver</b>:  maps exceptions to views also allowing for more complex exception handling code.</li>
                <li><b>ThemeResolver</b>:  resolves themes your web application can use, for example, to offer personalized layouts</li>
            </ul>
        </div>
    </div>

    <div class="hidden">
        <div id="e4_1">
            <b>Model</b>
            in Spring MVC represents processed data to be rendered in the view by the respective view resolver.
            Is an object backed my a
            <b>Map of attributes</b>
            names and values that can be sent between client and server.
            <br/>
            <br/>

            Processing:
            <ul>
                <li>Model is passed by the controller to the dispatcher servlet</li>
                <li>dispatcher server send it to the respective view resolver</li>
                <li>view resolver is rendering model’s data to the view and generate html page</li>
            </ul>
            Spring provide support to access the model in the view layer
        </div>
    </div>
</div>

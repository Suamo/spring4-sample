<div>
    <h4>Data Management</h4>
    <ul>
        <li>
            <b class="sub">Exceptions:</b>
            <a title="c1_1">hierarchy</a>
            <a title="c1_2">why unchecked</a>
        </li>
        <li>
            <b class="sub">DataSource:</b>
            <a title="c2_1">configuration</a>
            <a title="c2_2">types</a>
            <a title="c2_3">JNDI</a>
        </li>
        <li>
            <b class="sub">JdbcTemplate:</b>
            <a title="c3_1" class="label-warning">what is</a>
            <a title="c3_2" class="label-danger">callbacks</a>
            <a title="c3_21">execute</a>
            <a title="c3_3">queries</a>
            <a title="c3_4">updates</a>
        </li>
        <li>
            <b class="sub">Transactions:</b>
            <a title="c4_1">what is</a>
            <a title="c4_2">types</a>
            <a title="c4_6" class="label-danger">configuration</a>
            <a title="c4_3" class="label-danger">transaction strategy</a>
            <a title="c4_4" class="label-danger">isolation</a>
            <a title="c4_5" class="label-warning">propagation</a>
            <a title="c4_7">@Transactional</a>
            <a title="c4_8" class="label-warning">rollback</a>
        </li>
        <li>
            <b class="sub">ORM:</b>
            <a title="c6_1">what is</a>
            <a title="c6_2">how works</a>
        </li>
        <li>
            <b class="sub">JPA:</b>
            <a title="c7_1">what is</a>
            <a title="c7_2" class="label-warning">configuration</a>
            <a title="c7_3">participation in transaction</a>
        </li>
        <li>
            <b class="sub">Spring data:</b>
            <a title="c8_1">instant repository</a>
            <a title="c8_2" class="label-warning">how works</a>
            <a title="c8_3" class="label-warning">@Query</a>
        </li>
    </ul>

    <div class="hidden">
        <div id="c1_1">
            Data access exceptions hierarchy:
            <ul>
                <li><b>RuntimeException</b>
                    <ul>
                        <li><b class="r">DataAccessException</b>
                            <ul>
                                <li>DataAccessResourceFailureException</li>
                                <li>CleanupFailureDataAccessException</li>
                                <li>InvalidDataAccessApiUsageException</li>
                                <li>InvalidDataAccessResourceUsageException</li>
                                <li>DataRetrievalFailureException</li>
                                <li>OptimisticLockingFailureException</li>
                                <li>UnauthorizedDataAccessException</li>
                                <li>DataintegrityvViolationException</li>
                                <li>DeadlockLoserDataAccessException</li>
                                <li>etc...</li>
                            </ul>
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
        <div id="c1_2">
            <ul>
                <li>best practice for API</li>
                <li>best when it's imossible to do anything useful</li>
            </ul>
        </div>
    </div>

    <div class="hidden">
        <div id="c2_1">
            <ul>
                <li>Define properties (DataSourceProperties in Boot). Usually:
                    <ul>
                        <li>"<b>driverClassName</b>"
                        </li>
                        <li>"<b>url</b>"
                        </li>
                        <li>"<b>username</b>"
                        </li>
                        <li>"<b>password</b>"
                        </li>
                    </ul>
                </li>
                <li>Create DataSource with defined properties</li>
                <li>Create environment specific PlatformTransactionManager with created dataSource</li>
            </ul>
        </div>
        <div id="c2_2">
            Package: org.springframework.jdbc.datasource
            <br/>
            <br/>
            Hierarchy:
            <ul>
                <li>(i) javax.sql.DataSource
                    <ul>
                        <li>AbstractDataSource
                            <ul>
                                <li>AbstractRoutingDataSource
                                    <ul>
                                        <li>IsolationLevelDataSourceRouter</li>
                                    </ul>
                                </li>
                                <li>AbstractDriverBasedDataSource
                                    <ul>
                                        <li>
                                            <b>SimpleDriverDataSource</b>
                                        </li>
                                        <li>
                                            <b>DriverManagerDataSource</b> - every time uses new Connection and closes is
                                            after use. <b class="r">Slow</b> for many requests.
                                            <ul>
                                                <li>
                                                    <b>SingleConnectionDataSource</b> - connection is not closed after each use.
                                                    Not thread safe.
                                                </li>
                                            </ul>
                                        </li>
                                    </ul>
                                </li>
                            </ul>
                        </li>
                        <li>(i) SmartDataSource
                            <ul>
                                <li>SingleConnectionDataSource</li> - classes using this interface can query whether or
                                not the Connection should be closed after an operation
                            </ul>
                        </li>
                        <li>(i) EmbeddedDatabase
                            <ul>
                                <li>EmbeddedDataSourceProxy</li>
                            </ul>
                        </li>
                    </ul>
                </li>
            </ul>
            <br/>

            DataSources Builders:
            <ul>
                <li>DataSourceBuilder (Boot)</li>
                <li>
                    <b>EmbeddedDatabaseBuilder</b>
                </li>
            </ul>
            <br/>

            Spring Boot can auto-configure <b>embedded</b>:
            <ul>
                <li><b class="r">H2</b></li>
                <li><b class="r">HSQL</b></li>
                <li><b class="r">Derby</b></li>
            </ul><br/>
            If JARs for those DBs are in the class path Spring will try to configure in-memotry DB only if auto-configuration is
            turn on (@SpringBootApplication or @EnableAutoConfiguration)
        </div>
        <div id="c2_3">
            &lt;jee:jndi-lookup id="dataSource" jndi-name="jdbc/jpetstore"/>
            <br/>
            &lt;bean id="txManager" class="org.springframework.transaction.jta.<b>JtaTransactionManager</b>"/>
            <br/>
            (doesn't need to know about datasource)
        </div>
    </div>

    <div class="hidden">
        <div id="c3_1">
            JdbcTemplate is a <b>JDBC approach</b><br/>
            Named so because of a Template Method pattern that it's based on.<br/>
            Expects <b>DataSource</b> as a controller argument.
            <br/><br/>
            Features:
            <ul>
                <li>creation of statements</li>
                <li>execution of: statements, SQLs, stored procedures</li>
                <li>provides execution results</li>
                <li>creation/releasing connections</li>
                <li>covers JDBC exceptions with more informative</li>
                <li>instance of JdbcTemplate is <b class="r">thread-safe</b> once configured</li>
            </ul><br/>
            <b>Shouldn't be confused with HibernateTemplate.</b>
        </div>
        <div id="c3_2">
            callback ("call-after" function) - called after the other function execution.
            <br/><br/>
            Main JdbcTemplate callbacks:
            <ul>
                <li>
                    <b>PreparedStatementCreator</b>
                    prepare parametrized precompiled statement from a Connection for queries
                </li>
                <li>
                    <b>CallableStatementCreator</b>
                    prepare parametrized statement from a Connection to execute SQL stored procedures
                </li>
                <li>
                    <b>RowCallbackHandler</b>
                    jdbcTemplate uses RowMapper in methods that doesn't return values. Called for
                    each ResultSet record separately.
                </li>
            </ul>
            <br/>
            Alternative callback interfaces:
            <ul>
                <li>
                    <b>RowMapper</b> called for each ResultSet record separately to convert it to a result object
                </li>
                <li>
                    <b>ResultSetExtractor</b> called once for the whole ResultSet to convert it to a result object
                </li>
            </ul>
        </div>
        <div id="c3_21">
            jdbcTemplate.execute(...) can execute any arbitrary SQL (select, insert, delete...), including DDL statements
            (e.g. CREATE TABLE).<br/>
            Can throw DataAccessException. Returns void.
        </div>
        <div id="c3_3">
            <b>Plain SQL</b> statement execution:
            <ul>
                <li>jdbcTemplate.<b>queryFor</b>Object("select count(*) from p_user", Integer.class);</li>
                <li>jdbcTemplate.queryForInt("select count(*) from p_user");</li>
            </ul>
            <br/>

            <b>Dynamic queries</b> (with returning an entity) are possible with <b>RowMapper</b>.
            <br/>
            If RowMapper is provided following JdbcTemplate methods can be used:
            <ul>
                <li>
                    <b>query()</b>
                </li>
                <li>
                    <b>queryForObject()</b>
                    – returns one object
                </li>
                <li>
                    <b>queryForMap()</b>
                    - returns object as map (column name:value)
                </li>
                <li>
                    <b>queryForList()</b>
                    - returns multiple objects
                </li>
            </ul>
        </div>
        <div id="c3_4">
            <b>update(..)</b> method performs insert, update and delete operations and returns number of affected rows. Can call
            <b class="r">stored procedures</b>.<br/>
            Parameter values are usually provided as Objects varargs leaving them to the PreparedStatement to guess the corresponding SQL field type.
            <br/><br/>
            Samples:
            <ul>
                <li>jdbcTemplate.update("<b>insert into</b> t_actor (first_name, last_name) values (?, ?)", "Leonor", "Watling");</li>
                <li>jdbcTemplate.update("<b>update</b> t_actor <b>set</b> last_name = ? where id = ?", "Banjo", 5276L);</li>
                <li>jdbcTemplate.update("<b>delete</b> from actor where id = ?", Long.valueOf(actorId));</li>
                <li>jdbcTemplate.update("<b>call</b> MY_PROCEDURE(?)", Long.valueOf(unionId));</li>
            </ul>
        </div>
    </div>

    <div class="hidden">
        <div id="c4_1">
            A transaction (symbolizes a
            <b>unit of work</b>) is a series of operations such that either all occur, or
            nothing occurs.
            <br/>
            <br/>
            Being cross-cutting concern in Spring is implemented with AOP.
            <br/>
            <br/>

            The Unit of Work pattern is used to group one or more operations into a single
            transaction, so that all operations either pass or fail as one.
            <br/>
            JDBC AutoCommit mode forces to run each query as separate transaction. So
            <b>AutoCommit mode is opposite to
                UnitOfWork</b>.
        </div>
        <div id="c4_2">
            <ul>
                <li>
                    <b>Global transactions</b>
                    handles multiple transactional resources (e.g. databases + message queues).
                    The application server manages global transactions through the JTA (with JNDI source).
                </li>
                <li>
                    <b>Local transactions</b>
                    handles single transactional resources
                </li>
            </ul><br/>
            JTA - Java Transaction API
        </div>
        <div id="c4_3">
            Defined by the <b>PlatformTransactionManager</b> interface with methods
            <ul>
                <li><b>getTransaction</b> (takes TransactionDefinition as an argument and returns TransactionStatus)</li>
                <li><b>commit</b></li>
                <li><b>rollback</b></li>
            </ul><br/>

            <b>TransactionDefinition</b>
            defines transaction properties:
            <ul>
                <li>isolation level</li>
                <li>propagation behavior</li>
                <li>transaction timeout</li>
                <li>read-only status</li>
            </ul>
            <br/>

            <b>TransactionStatus</b> - new or current transaction status with methods:
            <ul>
                <li>isNewTransaction()</li>
                <li>hasSavepoint()</li>
                <li>setRollbackOnly()</li>
                <li>isRollbackOnly()</li>
                <li>flush()</li>
                <li>isCompleted()</li>
            </ul><br/>
            <b class="r">DataSourceTransactionManager</b> is a implementation for single JDBC datasources
        </div>
        <div id="c4_4">
            One of the transaction properties.
            <br/>
            <br/>
            <table>
                <tr>
                    <th>Level</th>
                    <th>Name</th>
                    <th>phantom reads</th>
                    <th>non-repeatable reads</th>
                    <th>dirty reads</th>
                </tr>
                <tr>
                    <td>1st (lowest)</td>
                    <td>Read <b>uncommitted</b></td>
                    <td>&nbsp;&nbsp;allowed</td>
                    <td>&nbsp;&nbsp;allowed</td>
                    <td>&nbsp;&nbsp;allowed</td>
                </tr>
                <tr>
                    <td>2nd*</td>
                    <td>Read <b>committed</b></td>
                    <td>&nbsp;&nbsp;allowed</td>
                    <td>&nbsp;&nbsp;allowed</td>
                    <td></td>
                </tr>
                <tr>
                    <td>3rd</td>
                    <td><b>Repeatable</b> reads</td>
                    <td>&nbsp;&nbsp;allowed</td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td>4th (highest)</td>
                    <td><b>Serializable</b></td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
            </table>
            <br/>
            *default in most DBs<br/><br/>
            <ul>
                <li><b>dirty read</b> [reading uncommitted between transactions] -
                    reading not committed changes between transactions</li>
                <li><b>non-repeatable read</b> [record changes] -
                    second read from transaction can return different record state (if committed by another transaction in parallel)</li>
                <li><b>phantom reads</b> [list changes] -
                    second read from transaction can return different records list (if aded/removed by another transaction)</li>
            </ul>
        </div>
        <div id="c4_5">
            One of the transaction properties.
            <br/>
            Propagation defines behavior of the target methods:
            if they should be executed in an existing or new transaction, or no transaction at all.
            <br/>
            <br/>
            <ul>
                <li><b>REQUIRES_NEW</b>: create a new transaction, suspend any existing one
                </li>
                <li><b>MANDATORY</b>: use current transaction, throw exception if none exists
                </li>
                <li><b class="r">[DEFAULT]</b> <b>REQUIRED</b>: use current transaction, if non exists – create one
                </li>
                <li><b>SUPPORTS</b>: use current transaction, execute non-transactionally if none exists
                </li>
                <li><b>NEVER</b>: execute non-transactionally, throw exception if any transaction exists
                </li>
                <li><b>NOT_SUPPORTED</b>: execute non-transactionally, suspend any existing transaction
                </li>
                <li>
                    <b>NESTED</b>: if a transaction exists create a nested one in it and execute everything there, else
                    behave like Propagation.REQUIRED
                </li>
            </ul>
        </div>
        <div id="c4_6">
            <ul>
                <li><b>Declarative</b>: best for big amount of transactional operations.
                    <br/>
                    Configuration:
                    <ul>
                        <li>
                            <b class="r">@EnableTransactionManagement</b> or <b class="r">&lt;tx:annotation-driven/></b>
                            to configuration
                        </li>
                        <li>
                            <b>@Transactional</b> annotation on methods/classes
                        </li>
                    </ul>
                    Transactional AOP proxy uses a <b>TransactionInterceptor</b> in conjunction with an appropriate
                    PlatformTransactionManager implementation to drive transactions around method invocations.
                    Used in its AOP proxies in applying transactional advice.
                </li>
                <li>
                    <b>Programming</b>: best for small number of transactional operations. Can set transaction name.
                    <br/>
                    Can be configured in two ways:
                    <ul>
                        <li>use
                            <b>PlatformTransactionManager</b>
                            bean directly to <b class="r">initiate</b>, <b class="r">roll back</b>, and <b class="r">commit</b>
                            transactions (using the TransactionDefinition and TransactionStatus)
                        </li>
                        <li>create <b>TransactionTemplate</b> and call execute(TransactionCallback)
                        </li>
                    </ul>
                </li>
            </ul><br/>
            Main entities:
            <ul>
                <li><b>TransactionTemplate</b> - simplifies programmatic <b class="r">transaction demarcation</b>
                    and <b class="r">transaction exception handling</b></li>
                <li><b>PlatformTransactionManager</b> - is the central interface in Spring's transaction infrastructure. Applications
                    can use this directly, but it is not primarily meant as API: Typically, applications will work with
                    either TransactionTemplate or declarative transaction demarcation through AOP.</li>
            </ul>
        </div>
        <div id="c4_7">
            @Transactional forces <b>AnnotationTransactionAspect</b> to interpret target method as a <b>join point</b>.
            Method or class marked @Transactional will be covered in transactional behavior
            (when method starts transaction will be opened and closed when the method finished).
            <br/>
            <br/>
            <b>Important</b>:
            <ul>
                <li>@Transactional can be applied on interface methods only if JDK dynamic proxy is used</li>
                <li>By default @Transactional works only on public methods. Using it on non-public methods will not raise any error,
                    but will have no transactional behaviour. @Transactional will work on non-public methods only in <b>AspectJ mode</b>.</li>
                <li>If one @Transactional method is calling another on the same object instance:
                    since transaction-management is implemented using AOP - @Transactional annotation will have no effect
                    on the method being called as no proxy is created. The same behavior is characteristic for AOP aspects.</li>
            </ul>

        </div>
        <div id="c4_8">
            Rollback policy - in case of occured <b>RuntimeException</b> or <b class="r">Errors</b> transaction is
            <b>marked for rollback</b>.
            <br/><br/>
            Types ot Exceptions for rollback can be changed (including checked exceptions):
            <ul>
                <li>XML: '<b>rollback-for</b>' or '<b>no-rollback-for</b>' attributes can be added to tx:method</li>
                <li>TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</li>
                <li>By @Transactional parameters: <b>rollbackFor</b>, <b>noRollbackFor</b>, <b>rollbackForClassName</b>,
                    <b>noRollbackForClassName</b>
                </li>
            </ul>
            <br/>

            <b>@Transactional test is automatically rolled back</b>
            after completion when:
            <ul>
                <li>used @RunWith(SpringJUnit4ClassRunner.class) in JUnit 4</li>
                <li>used @ExtendWith(SpringExtension.class) in JUnit 5</li>
            </ul>
        </div>
        <div id="c4_9">

        </div>
    </div>

    <div class="hidden">
        <div id="c6_1">
            <b>Object Relational Mapping</b>
            is meant to help us map our entities to the database tables.
            <br/>
            <br/>
            Benefits
            <ul>
                <li>Easy mapping object model to data model</li>
                <li>Much less code</li>
                <li>Concurrency support</li>
                <li>Automatic management of: Cache, Connection pool, Transactions, Keys</li>
            </ul>
            <br/>

            Disadvantages
            <ul>
                <li>Overhead for simple applications</li>
                <li>Need to learn implementation</li>
                <li>Performance lower</li>
                <li>Hard to make complex queries</li>
            </ul>
        </div>
        <div id="c6_2">
            Approaches to manipulate entities:
            <ul>
                <li><b>@PersistenceContext</b> (preferable)
                    <ul>
                        <li>defines dependency on a container-managed <b>EntityManager</b> and its associated persistence context</li>
                    </ul>
                </li>
                <li><b>@PersistenceUnit</b>
                    <ul>
                        <li>defines dependency to <b>EntityManagerFactory</b> and its associated persistence unit</li>
                        <li>EntityManagerFactory allows to create/destroy <b>EntityManager</b> manually</li>
                    </ul>
                </li>
            </ul><br/>

            <b>EntityManager</b>
            <ul>
                <li>associated with a persistence context (field in extended classes)</li>
                <li>inherited persistance context contains a set of entity instances that correspond to persistent entity identity</li>
                <li>writes, deletes and searches @Entity(s) to database</li>
            </ul><br/>

            <b>@Entity</b> marks a class as an entity that will be mapped to the database using ORM
        </div>
    </div>

    <div class="hidden">
        <div id="c7_1">
            <b>Java Persistence API</b> - high level <b>API and specification</b> so that different ORM tools can implement so that it
            provides the flexibility to developer to change the implementation from one ORM to another
        </div>
        <div id="c7_2">
            One of EntityManagerFactorys need to be configured:
            <ul>
                <li>
                    <b>LocalContainerEntityManagerFactoryBean</b>: supports injection of DataSource, local and global
                    transactions
                </li>
                <li>
                    <b>LocalEntityManagerFactoryBean</b>: suitable only for simple development purposes. "persistence
                    unit" with provider and properties (persistence.xml or more programmically since Spring 3.1).
                </li>
            </ul><br/>
            Alternative is to use in a JEE-compliant container where <b>application server</b> bootstraps the JPA
            persistence unit based on the information in the deployment descriptors. This allows Spring to look up
            the entity manager via <b>JNDI lookup</b>. In the JPA specification, a persistence unit should be defined in the
            configuration file META-INF/ persistence.xml or just using "Entity Scanning" since Spring 3.1
            <br/><br/>

            <b class="r">JpaTransactionManager</b> is an implementation of PlatformTransactionManager for a single JPA EntityManagerFactory.
            It binds a JPA EntityManager from the mentioned factory to the thread. Select the one that applies best.
            <br/><br/>

            Configuring JPA In Spring Boot:
            <ul>
                <li>spring-boot-starter</li>
                <li><b>spring-boot-starter-data-jpa</b></li>
            </ul>
        </div>
        <div id="c7_3">
            JpaTransactionManager expose a JPA transaction to JDBC access code that accesses the same DataSource
        </div>
    </div>

    <div class="hidden">
        <div id="c8_1">
            Is a simple way to create repoeitories.
            <br/>
            Can be done in two ways:
            <ul>
                <li>extend repository interface with <b>Repository</b>, <b>CrudRepository</b> or
                    <b>PagingAndSortingRepository</b>
                </li>
                <li>annotate your repository interface with
                    <b class="r">@RepositoryDefinition</b>
                </li>
            </ul><br/><br/>
            <b>JDK Proxy</b> will be used when Spring Data repositories are implemented at runtime.
        </div>
        <div id="c8_2">
            The query builder mechanism built into Spring Data repository infrastructure is building
            constraining queries over entities of the repository.
            <br/>
            The mechanism strips the following prefixes from the method and starts parsing the rest of it
            <ul>
                <li>
                    <b>find…By</b>
                </li>
                <li>
                    <b>read…By</b>
                </li>
                <li>
                    <b>query…By</b>
                </li>
                <li>
                    <b>count…By</b>
                </li>
                <li>
                    <b>get…By</b>
                </li>
            </ul>
        </div>
        <div id="c8_3">
            For more <b>complex queries</b>, you can annotate your method with <b>@Query</b>.
            <br/><br/>
            Features:
            <ul>
                <li>Allows customization using SQL/JPQL</li>
                <li>The execution of <b>pagination</b> or <b>dynamic sorting</b> for native queries is <b class="r">not supported</b></li>
                <li>Queries annotated to the query method will <b class="r">take precedence</b> over queries defined using
                    <b>@NamedQuery</b> or named queries declared in <b>orm.xml</b></li>
                <li>has <b>nativeQuery</b> parameter that allows usage of native queries</li>
            </ul>
        </div>
    </div>
</div>

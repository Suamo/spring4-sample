<div>
    <h4>Spring Boot</h4>
    <ul>
        <li>
            <b class="sub">Spring Boot:</b>
            <a title="d1_0" class="label-danger">running</a>
            <a title="d1_1">what is</a>
            <a title="d1_11">ext Config</a>
            <a title="d1_2">advantages</a>
            <a title="d1_3">configuration</a>
            <a title="d1_4" class="label-warning">properties</a>
            <a title="d1_5">embadded containers</a>
            <a title="d1_6">starter POM</a>
            <a title="d1_7">logging</a>
            <a title="d1_8">json</a>
        </li>
    </ul>

    <div class="hidden">
        <div id="d1_0">
            SpringApplication can be run in following ways:
            <ul>
                <li>SpringApplication.<b>run(WsApplication.class)</b>;</li>
                <li>SpringApplication.<b>run(WsApplication.class, args)</b>;</li>
                <li><b>new</b> SpringApplication(WsApplication.class).<b>run(args)</b>;</li>
                <li><b>new</b> SpringApplication(WsApplication.class).<b>run()</b>;</li>
            </ul>
        </div>
        <div id="d1_1">
            Spring Boot is an extension of the Spring framework which eliminates the boilerplate configurations
            required for setting up a Spring application.

            <br/><br/>
            Features:
            <ul>
                <li>Create <b>stand-alone</b> Spring applications
                </li>
                <li>
                    <b>Embed servlet containers</b> (no need to deploy WAR files)
                </li>
                <li>Provide
                    <b>opinionated*</b> 'starter' dependencies to simplify your build configuration
                </li>
                <li>
                    <b>Automatically configure</b> Spring and 3rd party libraries whenever possible
                </li>
                <li>Provide production-ready features such as metrics, health checks and externalized configuration</li>
                <li>Absolutely no code generation and no requirement for XML configuration</li>
            </ul>
            <br/>
            * <b>Opinionated</b>: Spring scans dependencies from classpath and adds support for different
            components by initializing “maybe” required beans. For example if it sees a dependency on Thymeleaf,
            3 beans that Thymeleaf uses are automatically initialized: ThymeleafViewResolver, SpringTemplateEngine,
            TemplateResolver. Moreover it also scans the templates directory from resources for Thymeleaf templates.
            If you have tomcat-embedded.jar on your classpath TomcatServletWebServerFactory bean will be initialized.
            <br/><br/>
            Spring Bood <b class="r">does not</b> do code generation.
        </div>
        <div id="d1_11">
            Spring Boot lets you externalize your configuration so that you can work with the same application code
            in different environments.<br/><br/>
            Can be done in:
            <ul>
                <li>properties files</li>
                <li>YAML files</li>
                <li>environment variables</li>
                <li>command-line arguments</li>
            </ul>
        </div>
        <div id="d1_2">
            <ul>
                <li>easy configuration of Spring application</li>
                <li>Integrated web containers that allow for easy testing</li>
                <li>Starters – sets of dependencies that help setting up a “typical” application</li>
                <li>Decrease amount of boilerplate code</li>
            </ul>
        </div>
        <div id="d1_3">
            <b>@EnableAutoConfiguration</b>
            - enables auto-configuration of the Application Context (opinionated view)
            <br/>
            <br/>

            <b>@SpringBootApplication</b>
            - just convenient annotation that is
            meta-annotated with @Configuration, @EnableAutoConfiguration and @ComponentScan.
        </div>
        <div id="d1_4">
            common annotations and configuration properties
            SpringApplication loads properties from <b>application.properties</b> (or
            <b>yml/yaml</b>) files in the
            following locations and adds them to the Spring Environment:
            <ul>
                <li>
                    <b>current directory /config</b>
                </li>
                <li>
                    <b>current directory</b>
                </li>
                <li>
                    <b>classpath /config</b>
                </li>
                <li>
                    <b>classpath root</b>
                </li>
            </ul><br/>
            <b class="r">@ConfigurationProperties</b> - externalized properties configuration
        </div>
        <div id="d1_5">
            Spring Boot supports following embedded containers:
            <ul>
                <li>
                    <b>Tomcat</b>
                </li>
                <li>
                    <b>Jetty</b>
                </li>
                <li>
                    <b>Undertow</b>
                </li>
            </ul>
            <br/>

            Jar vs War
            <ul>
                <li>JAR - onlly suitable for embedded container since it will come as a part of the application</li>
                <li>WAR - archive that can be deployed on an external container</li>
            </ul><br/>

            To build <b>WAR</b> you need:
            <ul>
                <li>&lt;packaging>war&lt;/packaging></li>
                <li>Make spring-boot-starter-tomcat dependency as provided to avoid server files being included in the war</li>
                <li>provide SpringBootServletInitializer implementation</li>
            </ul>
        </div>
        <div id="d1_6">
            Maven users can inherit from the
            <b>spring-boot-starter-parent</b>
            project to obtain sensible defaults.
            <br/>
            <br/>
            Features:
            <ul>
                <li>
                    <b>Java 1.8</b>
                    as the default
                </li>
                <li>
                    <b>UTF-8</b>
                    source encoding
                </li>
                <li>A Dependency Management section, inherited from the spring-boot-dependencies pom, that manages
                    the
                    <b>versions of common dependencies</b>. This dependency management lets you omit
                    &lt;version>
                    tags for those
                    dependencies when used in your own pom.
                </li>
                <li>Pom properties can be used in project properties (or yml) using
                    <b>@..@</b>
                    placeholders
                </li>
                <li>Additional <b>plugin configurations</b> (exec plugin, Git commit ID, and shade)
                </li>
                <li>
                    <b>profile-specific resource filtering</b>
                    (e.g. application-dev.properties and application-dev.yml)
                </li>
            </ul>
        </div>
        <div id="d1_7">
            Configuration:
            <ul>
                <li>add the required dependencies to the classpath</li>
                <li>configure the required framework using:
                    <ul>
                        <li>application.properties</li>
                        <li>framework-specific configuration file placed in the classpath</li>
                        <li>system properties</li>
                    </ul>
                </li>
            </ul>
            <br/>
            Spring Boot uses <b class="r">Commons Logging</b>
            for all internal logging but leaves the underlying log implementation open.
            <br/>
            <br/>
            Default configurations are provided for;
            <ul>
                <li><b>Java Util Logging</b></li>
                <li><b>Log4J2</b></li>
                <li><b>Logback</b></li>
            </ul>
        </div>
        <div id="d1_8">
            <b>JsonComponent</b> - Component that provides JsonSerializer and/or JsonDeserializer implementations to be
            registered with Jackson when JsonComponentModule is in use. Can be used to annotate JsonSerializer or
            JsonDeserializer implementations directly or a class that contains them as inner-classes.
        </div>
    </div>
</div>

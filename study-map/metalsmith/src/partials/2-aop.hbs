<div>
    <h4>AOP</h4>
    <ul>
        <li>
            <b class="sub">AOP:</b>
            <a title="b1_1">what is</a>
            <a title="b1_2">in Spring</a>
            <a title="b1_3">configuration</a>
        </li>
        <li>
            <b class="sub">Terminology:</b>
            <a title="b2_1">aspect</a>
            <a title="b2_2" class="label-warning">advice</a>
            <a title="b2_3">cross-cutting concern</a>
            <a title="b2_4">pointcut</a>
            <a title="b2_5">join point</a>
            <a title="b2_6">weaving</a>
        </li>
        <li>
            <b class="sub">Proxy:</b>
            <a title="b3_1">what is</a>
            <a title="b3_2" class="label-warning">types</a>
            <a title="b3_3">benefits</a>
        </li>
    </ul>

    <div class="hidden">
        <div id="b1_1">
            Is a paradigm that aims to increase modularity by separation of cross-cutting concerns
        </div>
        <div id="b1_2">
            <ul>
                <li>implemented in pure Java</li>
                <li>supports only method execution join points</li>
                <li>introduced in Spring to provide a close integration with Spring IoC to help solve common problems in
                    enterprise applications
                </li>
            </ul><br/>
            AspectJ library is used for weaving. All annotations used for AOP in spring are used from AspectJ library
            (e.g. @Around, @Before, @Aspect, etc.)
        </div>
        <div id="b1_3">
            Once @AspectJ support enabled - <b>all @Aspect marked classes will be automatically detected and used</b> to configure
            AOP. <b>Important</b>: "@AspectJ" is not an annotation, but a name of tbe libtaty the way it's used in the Spring spec and on the exam.
            <br/>
            <br/>
            Enabling @AspectJ support:
            <ul>
                <li>add <b class="r">aspectjweaver.jar</b> to classpath</li>
                <li>Java config: <b>@EnableAspectJAutoProxy</b></li>
                <li>XML config: &lt;aop:<b>aspectj-autoproxy</b>/>
                </li>
            </ul>
        </div>
    </div>

    <div class="hidden">
        <div id="b2_1">
            Is a <b>class containing</b> code specific to a <b>cross-cutting</b> concern (pointcuts and advices).
            <br/>
            <br/>
            In code:
            <ul>
                <li>Java:
                    <b>@Aspect</b>
                </li>
                <li>Xml:
                    <b>
                        &lt;bean class="path.to.MyAspect"/>
                    </b>
                </li>
            </ul>
        </div>
        <div id="b2_2">
            Is an action taken by an aspect at a particular join point. In Sprint - <b>annotated method</b>.
            <br/>
            <br/>
            In code:
            <ul>
                <li>
                    <b>@Before</b>
                    executes before a join point. Execution of join point cannot be stopped unless unless an
                    exception is thrown.
                </li>
                <li>
                    <b>@AfterReturning</b>
                    executed after a join point completes normally (without throwing an exception)
                </li>
                <li>
                    <b>@AfterThrowing</b> executed if a method exits by throwing an exception
                    (<b class="r">"throwing"</b> argument can specify exact exception)
                </li>
                <li>
                    <b>@After</b> executed <b class="r">in any case</b> (if method executed normally or with exception)
                </li>
                <li>
                    <b>@Around</b>
                    executed instead of join point method. Join Point method can be called manually by
                    ProceedingJoinPoint.proceed. The first parameter of the advice method <b>must be</b> of type ProceedingJoinPoint.
                    The only advice which can try/catch exceptions of join point.
                </li>
            </ul>
            <br/>
            Advices can receive JoinPoint as a method argument. @Around can also get ProceedingJoinPoint.
        </div>
        <div id="b2_3">
            A cross-cutting concern is a logic in an application that cannot be decomposed from the rest of the
            application
            and may result in code duplication and tight coupling
            <br/>
            <br/>
            In code:
            <ul>
                <li>
                    <b>logic that can be adviced</b>
                </li>
            </ul>
            <br/>
            Examples of cross-cutting concerns:
            <ul>
                <li>Logging</li>
                <li>Security</li>
                <li>Transaction management</li>
                <li>Caching</li>
            </ul>
            <br/>
            Problems if cross-cutting concerns not used:
            <ul>
                <li>Scattering (code duplication)</li>
                <li>Tangling (significant dependencies between systems)</li>
            </ul>
        </div>
        <div id="b2_4">
            Is an expression that identifies which join point advice should be bind to.
            The advice will be called <b class="r">when</b> the proxy method matches the join point expression.
            <br/><br/>
            <b>Pointcut expressions</b> are defined using AspectJ Pointcut Expression Language.
            <br/><br/>
            In code:
            <ul>
                <li>@Before(<b>"execution(* path.to.MyAopBean.checkPointcut(..))"</b>)
                </li>
                <li>@Before("callMethodWithException()")../some advice/..;
                    <b>@Pointcut</b>(value = "execution(* path.to.AopBean.callMethodWithException())")
                    - for cases when the same point cut expression is duplicated in many advices
                </li>
            </ul>
            <br/>

            Spring AOP supports the following AspectJ pointcut designators
            <ul>
                <li>execution</li>
                <li>this</li>
                <li>within, @within</li>
                <li>target, @target</li>
                <li>args, @args</li>
                <li>@annotation</li>
            </ul><br/>

            Samples:
            <ul>
                <li>execution(public * *(..)) - all public method. Here:
                    <ul>
                        <li>any package - name since no package name</li>
                        <li>* - any return type</li>
                        <li>* - any method name</li>
                        <li>(..) - zero or more number of arguments</li>
                    </ul>
                </li>
                <li></li>
                <li></li>
                <li></li>
            </ul>
        </div>
        <div id="b2_5">
            A point during the execution of a program, such as the execution of a method or the handling of an
            exception. In Spring AOP, a join point always <b>represents a method execution</b>.<br/><br/>
            In code:
            <ul>
                <li>
                    <b>Logic inside an advice</b>
                </li>
            </ul>
        </div>
        <div id="b2_6">
            Is a merging advices and target class. The weaver generates a woven class (an advised object, proxy).<br/>
            Weaving is done at <b>runtime</b>.
        </div>
    </div>

    <div class="hidden">
        <div id="b3_1">
            Is an object created by the AOP framework with merged advices and target class
        </div>
        <div id="b3_2">
            <ul>
                <li><b>JDK dynamic proxy</b>
                    <ul>
                        <li>used by default for beans with <b>interface</b></li>
                        <li>recommended to use</li>
                        <li>proxy will implement the same interface as target object</li>
                        <li>intercepts only <b class="r">public</b> methods</li>
                    </ul>
                </li>
                <li><b>CGLIB proxy</b>
                    <ul>
                        <li>is <b>default for @Configuration</b> and other beans with <b>no interface</b></li>
                        <li>not recommended to use</li>
                        <li>proxy willextend target object</li>
                        <li>adviced methods cannot be final</li>
                        <li>CGLIB classes are under the org.springframework.cglib package and included in the spring-core jar</li>
                        <li>intercepts <b class="r">public, protected and package-visible</b> methods</li>
                    </ul>
                </li>
            </ul><br/>
            Note: CGLIB can be forced for usage by applying <b>proxy-target-class="true"</b>
        </div>
        <div id="b3_3">
            Benefits
            <ul>
                <li>pure Java implementation</li>
                <li>close integration with Spring</li>
            </ul>
            <br/>
            Disadvantages
            <ul>
                <li>only methods join points (no field interception)</li>
                <li>little runtime overhead</li>
                <li>local or internal method calls within an adviced class will not be intercepted</li>
            </ul>
        </div>
    </div>
</div>

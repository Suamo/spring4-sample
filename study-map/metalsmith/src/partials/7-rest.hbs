<div>
    <h4>REST</h4>
    <ul>
        <li>
            <b class="sub">Overview:</b>
            <a title="g1_1">What is</a>
            <a title="g1_2">resources</a>
            <a title="g1_3" class="label-warning">idempotency</a>
            <a title="g1_4">scalable / interoperable</a>
            <a title="g1_5">status codes</a>
            <a title="g1_6" class="label-warning">exceptions</a>
        </li>
        <li>
            <b class="sub">In Spring:</b>
            <a title="g2_1">configuration</a>
            <a title="g2_2">@ResponseStatus</a>
            <a title="g2_3">@SessionAttributes</a>
        </li>
        <li>
            <b class="sub">RestTemplate:</b>
            <a title="g3_1">overview</a>
        </li>
    </ul>

    <div class="hidden">
        <div id="g1_1">
            <b>Representational State Transfer</b>
            (REST) is a software architectural style that defines a set of
            constraints to be used for creating Web services. RESTful Web services allow the requesting systems to
            access and manipulate textual representations of Web resources by using a uniform and predefined set of
            stateless operations.
            <br/>
            <br/>
            REST is <b>stateless</b> because according to its definition it HAS to be stateless; meaning each request
            must
            contain all the required information to interact with the server without the server need to store some
            context
            between requests.
            <br/>
            <br/>

            <b>CRUD</b>
            stands for create, read, update, delete
            <br/>
            <br/>
            REST <b>does not provide any security</b> constraints by default but we can implement it in the RESTful web
            services by using security layers like transport layer security (TLS), auth token security.
            <br/>
            <br/>

            <b>Operations (HTTP methods)</b>
            <ul>
                <li>
                    <b class="r">Safe</b> operations
                    <ul>
                        <li>HEAD</li>
                        <li>GET</li>
                        <li>OPTIONS</li>
                        <li>TRACE</li>
                    </ul>
                </li>
                <li>Operations that
                    <b>might cause side effects</b>
                    <ul>
                        <li>POST</li>
                        <li>PUT</li>
                        <li>DELETE</li>
                        <li>PATCH</li>
                    </ul>
                </li>
            </ul>
        </div>
        <div id="g1_2">
            <b>Resource</b>:
            <ul>
                <li>Resource a key abstraction of information in REST</li>
                <li>Any information that can be named can be a resource like Student, Employee etc.</li>
                <li>REST is resource based API</li>
                <li>Expose resources through URIs like
                    http://host:80/api/employees/1111, It is based on Model nouns, not verbs
                </li>
                <li>Resources support
                    limited set of operations – GET, PUT, POST, DELETE in case of HTTP. Example: update an employee use
                    PUT to /employees/1111 and don’t POST
                </li>
                <li>Resources can support multiple
                    representations like HTML, XML, JSON etc.
                </li>
                <li>Multiple URIs may refers to same resource as like CRUD
                    operation on employee resource using HTTP verbs
                </li>
            </ul><br/><br/>
            Services like SOAP are centered on actions and processes.
            REST is centred on information and resources.
        </div>
        <div id="g1_3">
            Idempotence (mathematics and computer science) - is the property of certain operations when they can be
            <b>applied multiple times without changing</b>
            the result beyond the initial application.
            <br/>
            <br/>
            Idempotent <b class="r">operations</b> in REST:
            <ul>
                <li>{safe REST operations}</li>
                <li>PUT</li>
                <li>DELETE</li>
            </ul>
            Idempotence <b>allows requests caching</b> which leads to minimizing network load.

        </div>
        <div id="g1_4">
            <ul>
                <li>RESTful web services, <b>provide interoperability</b> between computer systems on the Internet (through API).
                </li>
                <li>Since good services are built to be stateless, they <b>can scale horizontally</b> just like regular
                    web
                    farms (a tried
                    and trusted pattern). And once a good caching strategy is devised, load on servers and latency for
                    consumers are both reduced.
                </li>
            </ul>
        </div>
        <div id="g1_5">
            Most important codes:
            <ul>
                <li><b>200</b> OK</li>
                <li><b class="r">201 Created</b> Created</li>
                <li><b class="r">204</b> No Content</li>
                <li>307 Temporary redirect</li>
                <li><b>400</b> Bad request</li>
                <li>401 Unauthorized</li>
                <li>404 Not found</li>
                <li><b class="r">403</b> Forbidden</li>
                <li>429 Too many requests</li>
                <li><b>500</b> Internal server error</li>
                <li>501 Not implemented</li>
                <li>503 Service unavailable</li>
            </ul>
        </div>
        <div id="g1_6">
            If an exception occurs during request mapping or is thrown from a request handler (such as a @Controller),
            the DispatcherServlet delegates to a <b>chain of HandlerExceptionResolver</b> beans to resolve the exception and
            provide alternative handling, which is typically an error response.<br/><br/>

            HandlerExceptionResolver implementations:
            <ul>
                <li><b>SimpleMappingExceptionResolver</b> - maps exception class names and error view names</li>
                <li><b>DefaultHandlerExceptionResolver</b> - maps exceptions raised by Spring MVC to HTTP status codes</li>
                <li><b>ResponseStatusExceptionResolver</b> - maps exceptions with the @ResponseStatus annotation to
                    HTTP status codes based on the value in the annotation</li>
                <li><b>ExceptionHandlerExceptionResolver</b> - calls @ExceptionHandler method in a @Controller or a @ControllerAdvice class</li>
            </ul>
        </div>
    </div>

    <div class="hidden">
        <div id="g2_1">
            Spring MVC is the core component for REST support so spring-webmvc.jar must be in the clsspath.
            <br/>
            Can be configured by Spring Boot starter: <b class="r">spring-boot-starter-web</b>
            <br/>
            <br/>

            REST controller can be annotated with specialization of @Controller - <b>@RestController</b>.
            The difference is only that @RestController defines @ResponseBody
            <br/>
            <br/>

            Conversions (is done by <b>HttpMessageConverter</b> implementations):
            <ul>
                <li>
                    <b>@RequestBody</b>
                    (can be applied on controller <b>method argument</b>) - access to the HTTP request
                    body.
                    Body content is converted to the declared method argument type by using HttpMessageConverter
                    implementations
                </li>
                <li>
                    <b>@ResponseBody</b>
                    (can be applied on controller <b>method</b>) serializes return value to the
                    response body
                    (versus view resolution and rendering with an HTML template)
                </li>
            </ul>
            <br/>

            In addition to <b>@RequestMapping</b> annotation there are also HTTP method specific specializations:
            <ul>
                <li>@GetMapping</li>
                <li>@PostMapping</li>
                <li>@PutMapping</li>
                <li>@DeleteMapping</li>
                <li>@PatchMapping</li>
            </ul>
        </div>
        <div id="g2_2">
            <b>@ResponseStatus</b> defines "code" and "reason" for HTTP response of controller method.
            <br/>
            <br/>

            The MVC Config automatically declares built-in resolvers for default Spring MVC exceptions, for
            @ResponseStatus
            annotated exceptions, and for support of @ExceptionHandler methods. You can customize that list or replace
            it.
        </div>
        <div id="g2_3">
            <b>@SessionAttributes</b> is used to store <b class="r">model attributes</b> in the
            <b class="r">HTTP Servlet session</b> between requests.
            It is a type-level annotation that declares the session attributes used by a specific controller.
            This typically lists the names of model attributes or types of model attributes that should be transparently
            stored in the session for subsequent requests to access.
        </div>
    </div>

    <div class="hidden">
        <div id="g3_1">
            <b>RestTemplate</b>
            - synchronous client to perform HTTP requests, exposing a simple, template method API over
            underlying HTTP client libraries such as the JDK {HttpURLConnection}, Apache HttpComponents, and others.

            <br/><br/>
            <b>HttpMethod</b>
            class with constants that can be used in RestTemplate: GET, HEAD, POST, PUT, PATCH, DELETE,
            OPTIONS, TRACE.

            <br/><br/>
            Example:<br/>
            String url = "http://localhost:8080/users/{$username}";<br/>
            User user = <b>restTemplate.getForObject</b>(url, User.class, "johncusack");

            <br/><br/>
            restTemplate methods automatically decode spaces in URL.<br/>
            <b class="r">The return type and the second parameter should be the same.</b>
        </div>
    </div>
</div>

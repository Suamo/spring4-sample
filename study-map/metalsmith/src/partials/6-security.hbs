<div>
    <h4>Security</h4>
    <ul>
        <li>
            <b class="sub">Overview:</b>
            <a title="f1_1">overview</a>
            <a title="f1_11">principal</a>
            <a title="f1_2">authentication vs authorization</a>
            <a title="f1_3" class="label-warning">method security</a>
            <a title="f1_4">view protection</a>
        </li>
        <li>
            <b class="sub">Configuration:</b>
            <a title="f2_1" class="label-danger">filters</a>
            <a title="f2_3">context</a>
            <a title="f2_4">intercept-url</a>
            <a title="f2_5">antMatcher vs mvcMatcher</a>
            <a title="f2_6" class="label-warning">passwords</a>
        </li>
    </ul>

    <div class="hidden">
        <div id="f1_1">
            Spring Security is a cross cutting concern.
            implemented in the following two ways depending on what is to be secured:
            <ul>
                <li><b>Method invocation authorization</b>: is done via AOP proxy
                    that inherits from the AbstractSecurityInterceptor class.
                </li>
                <li><b>Web infrastructure security</b>: is based entirely on servlet filters.
                    It deals in <b class="r">HttpServletRequest</b> s and <b class="r">HttpServletResponse</b>. Spring Security maintains a filter chain
                    internally where each of the filters has a particular responsibility.
                </li>
            </ul><br/>

            Spring Security offers several options for configuring a user store:
            <ul>
                <li>An <b>in-memory</b> user store</li>
                <li>A <b>JDBC-based</b> user store</li>
                <li>An <b>LDAP</b>-backed user store</li>
                <li>A custom user details service</li>
            </ul><br/>

            Aauthentication integrasion is supported with technologies:
            <ul>
                <li>HTTP: BASIC, Digest, X.509</li>
                <li>LDAP</li>
                <li>Automatic "remember-me" and Anonymous</li>
                <li>JAAS</li>
                <li>Java EE container auth</li>
                <li>Kerberos</li>
                <li>and many-many more</li>
            </ul>
        </div>
        <div id="f1_11">
            Main emtities:
            <ul>
                <li><b>UserDetails</b>, <b>User</b> - represents principal. Store sensitive user information. Encapsulated into Authentication objects</li>
                <li><b>UserDetailsService</b> - core DAO interface which loads user-specific data. Return User objects.</li>
                <li><b>Authentication</b> - a token for an authentication request or for an authenticated
                    principal once the request has been processed</li>
                <li><b>SecurityContext</b> - thread-local storage for the Authentication</li>
                <li><b>SecurityContextHolder</b> - manages SecurityContext by some authentication mechanism</li>
            </ul><br/>
            <b>Note</b>: It is possible to store UserDetails in <b>LDAP/DB and other.</b>.
        </div>
        <div id="f1_2">
            <ul>
                <li>
                    <b>Authentication</b>
                    is the process of identifying whether this user exists (come first)
                </li>
                <li>
                    <b>Authorization</b>
                    is the process of determining what it may or may not do (roles, permissions)
                </li>
            </ul>
        </div>
        <div id="f1_3">
            Method-level security is commonly applied to services in the service layer of an application. Implemented by
            AOP Proxies.<br/><br/>
            Approaches:
            <ul>
                <li>
                    <b>@PreAuthorize, @PostAuthorize, @PreFilter, @PostFilter</b>
                    <ul>
                        <li>use SpEL expression</li>
                        <li>enabled by
                            <ul>
                                <li>@EnableGlobalMethodSecurity(<b class="r">prePostEnabled</b>=true)</li>
                                <li>&lt;global-method-security <b>pre-post-annotations</b>="enabled" /></li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <li>
                    <b>@RolesAllowed</b>
                    <ul>
                        <li>restricted by role name</li>
                        <li>enabled by
                            <ul>
                                <li>@EnableGlobalMethodSecurity(<b class="r">jsr250Enabled</b>=true)</li>
                                <li>&lt;global-method-security <b>jsr250-annotations</b>="enabled" /></li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <li>
                    <b>@Secured</b>
                    <ul>
                        <li>legacy annotation - better to use @PreAuthorize instead</li>
                        <li>restricted by role name</li>
                        <li>enabled by
                            <ul>
                                <li>@EnableGlobalMethodSecurity(<b class="r">securedEnabled</b>=true)</li>
                                <li>&lt;global-method-security <b>secured-annotations</b>="enabled" /></li>
                            </ul>
                        </li>
                    </ul>
                </li>
            </ul><br/>
            *annotations can be applied to class or method levels
        </div>
        <div id="f1_4">
            In order to protect JSP elements Spring <b>Security taglib</b> have to be used.
            <br/>
            <br/>


            Examples:
            <ul>
                <li>
                    <b>declaring</b>
                    <br/>
                    &lt;%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
                </li>
                <li>
                    <b class="r">authorize</b>
                    tag: visibility by condition
                    <br/>
                    &lt;sec:authorize access="hasRole('aadministrator')">Admin!&lt;/sec:authorize>
                </li>
                <li>
                    <b class="r">authentication</b>
                    tag: allows for accessing the Authentication object in the current security
                    context
                    <br/>
                    &lt;sec:authentication property="principal.username"/>
                </li>
                <li>
                    <b class="r">accesscontrollist</b>
                    tag (deprecated, use authorize tag): checks a list of permissions for a specific
                    domain object
                    <br/>
                    &lt;sec:accesscontrollist hasPermission="5, 7" domainObject="${order}">
                </li>
                <li>when cross-site request forgery (CSRF) protection is enabled
                    <ul>
                        <li>
                            <b>csrfInput</b>
                            tag inserts a hidden form with the name and value of the CSRF protection token
                            in the rendered page
                            <br/>
                            &lt;form action="login" method="post">
                            &lt;sec:csrfInput/>// fields //
                            &lt;/form>
                        </li>
                        <li>
                            <b>csrfMetaTags</b>
                            tag inserts meta tags containing the CSRF protection token form field and header
                            names and CSRF protection token value. These meta tags can then be accessed from JavaScript
                            in your application.
                            <br/>
                            &lt;sec:csrfMetaTags/>
                            &lt;script>
                            var csrfToken = $("meta[name='_csrf']").attr("content");
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>

    <div class="hidden">
        <div id="f2_1">
            <b>DelegatingFilterProxy</b>
            <ul>
                <li>implements the javax.servlet.Filter interface and thus is a <b>servlet filter</b></li>
                <li>registered in the web.xml as a &lt;filter> and linked in &lt;filter-mapping> by filter-name for particular &lt;url-pattern></li>
                <li>provides the link between web.xml and the application context</li>
            </ul><br/>

            <b>FilterChainProxy</b>
            <ul>
               <li>more comfortable and readable alternative to DelegatingFilterProxy</li>
               <li>can be used instead of adding separate DelegatingFilterProxy for each filter</li>
               <li>registered in the web.xml as a &lt;bean> and linked in &lt;filter-mapping> by filter-name for particular &lt;url-pattern></li>
               <li>defines a list of SecurityFilterChain</li>
            </ul>
            <br/>

            <b>SecurityFilterChain</b>
            <ul>
                <li>Contains list of Filters</li>
                <li><b>DefaultSecurityFilterChain</b> - the only Spring implementation</li>
            </ul><br/><br/>

            <b>Filters ordering</b>:
            <ul>
                <li>first filter is <b class="r">ChannelProcessingFilter</b></li>
                <li>huge list of other filters...</li>
                <li>last (almost) - <b class="r">FilterSecurityInterceptor</b></li>
            </ul>
        </div>
        <div id="f2_3">
            <b>SecurityContext</b>
            interface, which defines the minimum security information associated with a thread of
            execution.
            <br/>
            <br/>
            There are two methods:
            <ul>
                <li>setting an object that implements the Authentication</li>
                <li>retrieving an object that implements the Authentication</li>
            </ul><br/>
            The <b>Authentication</b> interface defines the properties of an object that represents a
            <b>security token</b>
            for <b>authentication request</b> (prior to authentication) and
            <b>authenticated principal</b>
            (after
            authentication).
        </div>
        <div id="f2_4">
            The
            &lt;<b>intercept-url</b>> element specifies WHO will be able to access whit URL resources
            <br/>
            <br/>
            Attributes:
            <ul>
                <li>
                    <b class="r">access</b>: Access attributes, commonly role names, specifying the user(s) that has access
                </li>
                <li>
                    <b class="r">filters</b>: Omitted or having the value “<b class="r">none</b>” (filter chain for the
                    URL pattern entirely ignored and all requests are alowed)
                </li>
                <li>
                    <b class="r">method</b>: HTTP method used with URL pattern and, optionally, servlet path to match requests.
                    If omitted all HTTP methods will match.
                </li>
                <li>
                    <b class="r">pattern</b>: URL path pattern for which the Spring Security filter chain will be applied.
                </li>
                <li>
                    <b>request-matcher-ref</b>: Reference to RequestMatcher bean used to determine if this
                    intercept-url will be used.
                </li>
                <li>
                    <b class="r">requires-channel</b>: “http”, “https” or “any”.
                </li>
                <li>
                    <b>servlet-path</b>: Servlet path used in combination with method and pattern to match requests.
                </li>
            </ul>
            <br/>
            <b>Multiple intercept-url</b>
            elements may be defined and they will be evaluated in the order in which they are
            defined.
            When an intercept-url element with a matching pattern is found, evaluation stops.
            It is therefore recommended to define more intercept-url elements with more specific pattern earlier and
            more
            general patterns later.
        </div>
        <div id="f2_5">
            antMatchers vs mvcMatchers:
            <ul>
                <li><b>antMatchers</b>("/services") only matches the exact “/services” URL
                    <ul>
                        <li>only matches the exact URLs. E.g. "/services" matches only "/services"</li>
                        <li>Sample: " .antMatchers("/user/edit").<b class="r">hasRole</b>("ADMIN") "</li>
                    </ul>
                </li>
                <li>
                    <b>mvcMatchers</b>
                    <ul>
                        <li>Matches URLs by the same rules as @RequestMapping. E.g. "/services" matches
                            “/services”, “/services/”, “/services.html” and “/services.abc”
                        </li>
                        <li>mvcMatchers API is newer than the antMatchers API</li>
                    </ul>
                </li><br/>
                Both methods are called from: http.<b class="r">authorizeRequests()</b>.
            </ul>
            <br/>
            * and ** patterns:
            <ul>
                <li>
                    <b>*</b>
                    Matches any path on the level at which the wildcard occur.
                    Example: /services/* matches /services/users and /services/orders but not
                    /services/orders/123/items.
                </li>
                <li>
                    <b>**</b>
                    Matches any path on the level at the wildcard occurs and all levels below.
                    If only /** or ** then will match any request. Example: /services/** matches /services, /services/,
                    /services/users and /services/orders and also /services/orders/123/items etc.
                </li>
            </ul>
        </div>
        <div id="f2_6">
            Spring Security's <b class="r">PasswordEncoder</b> helps in working with encoded passwords (two methods: encode and matches)<br/><br/>
            <b>Hashing</b>
            process is referred to as password encoding and is implemented using the PasswordEncoder
            interface.
            <br/>
            <br/>
            <b>Salt</b>
            is used as additional input for hashing password. Salts are used to safeguard passwords in storage.
        </div>
    </div>
</div>

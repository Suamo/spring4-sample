<div>
    <h1>Security</h1>
    <ul>
        <li>
            <b>Overview:</b>
            <a title="f1_1">overview</a>
            <a title="f1_11">principal</a>
            <a title="f1_2">authentication vs authorization</a>
            <a title="f1_3" class="label-danger">method security</a>
            <a title="f1_4">view security</a>
        </li>
        <li>
            <b>Configuration:</b>
            <a title="f2_1" class="label-warning">delegating filter proxy</a>
            <a title="f2_2" class="label-warning">security filter chain</a>
            <a title="f2_3" class="label-warning">context</a>
            <a title="f2_4" class="label-danger">intercept-url</a>
            <a title="f2_5" class="label-warning">antMatcher vs mvcMatcher</a>
            <a title="f2_6">passwords</a>
        </li>
    </ul>

    <div class="hidden">
        <div id="f1_1">
            Spring Security is a cross cutting concern.
            implemented in the following two ways depending on what is to be secured:
            <ul>
                <li><b>Method invocation authorization</b>: is done via AOP proxy
                    that inherits from the AbstractSecurityInterceptor class.
                </li>
                <li><b>Web infrastructure security</b>: is based entirely on servlet filters.
                    It deals in HttpServletRequest s and HttpServletResponse. Spring Security maintains a filter chain
                    internally where each of the filters has a particular responsibility.
                </li>
            </ul>
        </div>
        <div id="f1_11">
            Main emtities:
            <ul>
                <li><b>UserDetails</b>, <b>User</b> - represents principal. Store sensitive user information. Encapsulated into Authentication objects</li>
                <li><b>UserDetailsService</b> - core DAO interface which loads user-specific data. Return User objects.</li>
                <li><b>Authentication</b> - represents the token for an authentication request or for an authenticated
                    principal once the request has been processed. Stored in SecurityContext.</li>
            </ul>
        </div>
        <div id="f1_2">
            <ul>
                <li>
                    <b>Authentication</b>
                    is the process of identifying whether this user exists (come first)
                </li>
                <li>
                    <b>Authorization</b>
                    is the process of determining what it may or may not do (roles, permissions)
                </li>
            </ul>
        </div>
        <div id="f1_3">
            Method-level security is commonly applied to services in the service layer of an application. Implemented by
            AOP
            Proxies.
            <br/>
            <br/>
            Approaches:
            <ul>
                <li>
                    <b>@PreAuthorize</b>
                    <ul>
                        <li>restricted by SpEL expression</li>
                        <li>enabled by @EnableGlobalMethodSecurity(<b>prePostEnabled</b>=true)</li>
                    </ul>
                </li>
                <li>
                    <b>@RolesAllowed</b>
                    <ul>
                        <li>restricted by role name</li>
                        <li>enabled by @EnableGlobalMethodSecurity(<b>jsr250Enabled</b>=true)</li>
                    </ul>
                </li>
                <li>
                    <b>@Secured</b>
                    <ul>
                        <li>legacy annotation - better to use @PreAuthorize instead</li>
                        <li>restricted by role name</li>
                        <li>enabled by @EnableGlobalMethodSecurity(<b>securedEnabled</b>=true)</li>
                    </ul>
                </li>
            </ul>
            *both annotations can be applied on class or method levels
            <br/>
            <br/>

            Security annotations that use SpEL:
            <ul>
                <li>@PreAuthorize</li>
                <li>@PreFilter</li>
                <li>@PostAuthorize</li>
                <li>@PostFilter</li>
            </ul>

        </div>
        <div id="f1_4">
            In order to protect JSP elements Spring <b>Security taglib</b> have to be used.
            <br/>
            <br/>


            Examples:
            <ul>
                <li>
                    <b>declaring</b>
                    <br/>
                    &lt;%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
                </li>
                <li>
                    <b>authorize</b>
                    tag: visibility by condition
                    <br/>
                    &lt;sec:authorize access="hasRole('aadministrator')">Admin!&lt;/sec:authorize>
                </li>
                <li>
                    <b>authentication</b>
                    tag: allows for accessing the Authentication object in the current security
                    context
                    <br/>
                    &lt;sec:authentication property="principal.username"/>
                </li>
                <li>
                    <b>accesscontrollist</b>
                    tag (deprecated, use authorize tag): checks a list of permissions for a specific
                    domain object
                    <br/>
                    &lt;sec:accesscontrollist hasPermission="5, 7" domainObject="${order}">
                </li>
                <li>when cross-site request forgery (CSRF) protection is enabled
                    <ul>
                        <li>
                            <b>csrfInput</b>
                            tag inserts a hidden form with the name and value of the CSRF protection token
                            in the rendered page
                            <br/>
                            &lt;form action="login" method="post">
                            &lt;sec:csrfInput/>// fields //
                            &lt;/form>
                        </li>
                        <li>
                            <b>csrfMetaTags</b>
                            tag inserts meta tags containing the CSRF protection token form field and header
                            names and CSRF protection token value. These meta tags can then be accessed from JavaScript
                            in your application.
                            <br/>
                            &lt;sec:csrfMetaTags/>
                            &lt;script>
                            var csrfToken = $("meta[name='_csrf']").attr("content");
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>

    <div class="hidden">
        <div id="f2_1">
            The
            <b>DelegatingFilterProxy</b>
            class implements the javax.servlet.Filter interface and thus is a
            <b>servlet
                filter</b>.
            DelegatingFilterProxy provides the link between web.xml and the application context.
        </div>
        <div id="f2_2">
            The security filter chain implements the
            <b>SecurityFilterChain</b>
            interface and the only implementation
            provided by Spring Security is the <b>DefaultSecurityFilterChain</b> class.
            <br/>
            <br/>
            There are two parts:
            <ul>
                <li>
                    <b>request matcher</b>
                    - determines whether the filters in the
                    chain are to be applied to a request or not
                </li>
                <li>
                    <b>filters</b>
                </li>
            </ul>
        </div>
        <div id="f2_3">
            <b>SecurityContext</b>
            interface, which defines the minimum security information associated with a thread of
            execution.
            <br/>
            <br/>
            There are two methods:
            <ul>
                <li>setting an object that implements the Authentication</li>
                <li>retrieving an object that implements the Authentication</li>
            </ul><br/>
            The <b>Authentication</b> interface defines the properties of an object that represents a
            <b>security token</b>
            for <b>authentication request</b> (prior to authentication) and
            <b>authenticated principal</b>
            (after
            authentication).
        </div>
        <div id="f2_4">
            The
            &lt;<b>intercept-url</b>> element specifies WHO will be able to access whit URL resources
            <br/>
            <br/>
            Attributes:
            <ul>
                <li>
                    <b>access</b>: Access attributes, commonly role names, specifying the user(s) that has access
                </li>
                <li>
                    <b>filters</b>: Omitted or having the value “none”. In the latter case the Spring Security filter
                    chain
                    for
                    the URL pattern will be bypassed.
                </li>
                <li>
                    <b>method</b>: HTTP method used with URL pattern and, optionally, servlet path to match requests.
                    If omitted all HTTP methods will match.
                </li>
                <li>
                    <b>pattern</b>: URL path pattern for which the Spring Security filter chain will be applied.
                </li>
                <li>
                    <b>request-matcher-ref</b>: Reference to RequestMatcher bean used to determine if this
                    intercept-url will be used.
                    <ul>
                        <li>
                            <b>requires-channel</b>: Possible values are “http”, “https” and “any”. The first two are
                            for
                            access over
                            HTTP and HTTPS respectively. Omitting this attribute or using the value “any” matches both
                            HTTP
                            and HTTPS.
                        </li>
                        <li>
                            <b>servlet-path</b>: Servlet path used in combination with method and pattern to match
                            requests.
                            Optional.
                        </li>
                    </ul>
                </li>
            </ul>
            <br/>
            <b>Multiple intercept-url</b>
            elements may be defined and they will be evaluated in the order in which they are
            defined.
            When an intercept-url element with a matching pattern is found, evaluation stops.
            It is therefore recommended to define more intercept-url elements with more specific pattern earlier and
            more
            general patterns later.
        </div>
        <div id="f2_5">
            antMatchers vs mvcMatchers:
            <ul>
                <li><b>antMatchers</b>("/services") only matches the exact “/services” URL
                    <ul>
                        <li>only matches the exact URLs. E.g. "/services" matches only "/services"</li>
                    </ul>
                </li>
                <li>
                    <b>mvcMatchers</b>
                    <ul>
                        <li>Matches URLs by the same rules as @RequestMapping. E.g. "/services" matches
                            “/services”, “/services/”, “/services.html” and “/services.abc”
                        </li>
                        <li>mvcMatchers API is newer than the antMatchers API</li>
                    </ul>
                </li>
            </ul>
            <br/>
            * and ** patterns:
            <ul>
                <li>
                    <b>*</b>
                    Matches any path on the level at which the wildcard occur.
                    Example: /services/* matches /services/users and /services/orders but not
                    /services/orders/123/items.
                </li>
                <li>
                    <b>**</b>
                    Matches any path on the level at the wildcard occurs and all levels below.
                    If only /** or ** then will match any request. Example: /services/** matches /services, /services/,
                    /services/users and /services/orders and also /services/orders/123/items etc.
                </li>
            </ul>
        </div>
        <div id="f2_6">
            <b>Hashing</b>
            process is referred to as password encoding and is implemented using the PasswordEncoder
            interface.
            <br/>
            <br/>
            <b>Salt</b>
            is used as additional input for hashing password. Salts are used to safeguard passwords in storage.
        </div>
    </div>
</div>
